/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type BrandTone = "authoritative" | "casual" | "friendly" | "luxury" | "playful" | "professional";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type PlatformType = "facebook_post" | "instagram_post" | "instagram_story" | "tiktok_reel" | "twitter_post";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Brands {
  createdAt: Generated<Timestamp | null>;
  id: Generated<string>;
  logoUrl: string | null;
  name: string;
  primaryColor: string;
  productImages: Generated<string[]>;
  secondaryColor: string | null;
  tone: BrandTone;
  updatedAt: Generated<Timestamp | null>;
  websiteUrl: string | null;
}

export interface GeneratedCreatives {
  brandId: string;
  copyText: string | null;
  createdAt: Generated<Timestamp | null>;
  id: Generated<string>;
  imageUrl: string | null;
  matchScore: Generated<number | null>;
  platform: PlatformType;
  promptUsed: string | null;
  regionalProfileId: string;
}

export interface RegionalProfiles {
  createdAt: Generated<Timestamp | null>;
  culturalMotifs: Generated<string[]>;
  description: string | null;
  id: Generated<string>;
  name: string;
  regionCode: string;
  slangPhrases: Generated<string[]>;
  trendingColors: Generated<string[]>;
}

export interface DB {
  brands: Brands;
  generatedCreatives: GeneratedCreatives;
  regionalProfiles: RegionalProfiles;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const BrandToneArrayValues: [BrandTone, ...BrandTone[]] = ["authoritative","casual","friendly","luxury","playful","professional"];
export const PlatformTypeArrayValues: [PlatformType, ...PlatformType[]] = ["facebook_post","instagram_post","instagram_story","tiktok_reel","twitter_post"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.